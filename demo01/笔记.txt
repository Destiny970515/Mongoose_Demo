Mongoose 介绍：（demo01）
    Mongoose 是在 node.js 异步环境下对 MongoDB 进行便捷操作的对象模型工具。
Mongoose 是 NodeJS 的驱动，不能作为其他语言的驱动。

Mongoose 有两个特点：
1、通过关系型数据库的思想来设计非关系型数据库
2、基于 MongoDB 驱动，简化操作

Mongoose 的安装及使用：
1、安装：
cnpm i mongoose --save

2、引入 mongoose 并连接数据库
const mongoose = require("mongoose");
mongoose.connect("mongodb://127.0.0.1:27017/shop");

如果有账户密码需要采用下面的连接方式
mongoose.connect("mongodb://admin:123456@127.0.0.1:27017/shop");

3、定义 Schema
    数据库中的 Schema，为数据库对象的集合。Schema 是 Mongoose 里会用到的一种数据模式，
可以理解为表结构的定义。每个 Schema 会映射到 MongoDB 中的一个 collection（集合），
它不具备操作数据库的能力。

const userSchema = mongoose.Schema({
  name: String,
  age: Number,
  status: Number
});

4、创建数据模型
/**
 * 4、定义数据模型
 * model 第一个参数 要注意：
 * 1、首字母大写
 * 2、要和数据库表（集合）名称对应
 * 这个模型会和模型名称相同的“复数”的数据库表（集合）建立连接
 * 例如：
 * 模型名称为 User, 那么匹配数据库表（集合）中对应的数据库表（集合）中的表名就是 users (复数) 表（集合）
 * model 第二个参数
 * 指定 Schema
 * model 第三个参数
 * 指定 要映射的数据库表（集合），即可以忽视第一个参数“复数”的规则
 */
const Users = mongoose.model("User", userSchema); // 默认会操作 users（复数）数据库表（集合）
// const Users = mongoose.model("User", userSchema, 'user'); // 默认会操作第三个参数所指定的数据库表（集合）

// 5、操作数据库 例如：查询 users 表的数据
Users.find({}, (err, doc) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log(doc);
})

/** 
 * 6、增加 users 表的数据
 * 6.1 实例化 Model 通过实例化 User Model 创建增加的数据
 * 6.2 实例.save()
*/
let uAdd = new Users({
  name: "李四",
  age: 20,
  status: 0
});
uAdd.save((err) => {
  if (err) {
    console.log(err)
    return;
  }
  console.log("新增数据成功！")
})

/** 
 * 7、修改 users 表的数据
*/

Users.updateOne({"_id": "5f9a389c6b06469d04eca58e"}, {"name": "hh"}, (err, doc) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log("更新数据成功！！");
  console.log(doc);
})

/** 
 * 8、删除 users 表的数据
*/

Users.deleteOne({"_id": "5f9a389c6b06469d04eca58e"}, (err, doc) => {
  if (err) {
    console.log(err);
    return;
  }
  console.log("删除数据成功！！");
  console.log(doc);
})




